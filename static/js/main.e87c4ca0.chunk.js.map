{"version":3,"sources":["components/ImageHolder/index.js","components/Wrapper/index.js","components/NavBar/index.js","components/footer/footer.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageHolder","props","className","alt","name","src","image","onClick","cardClicked","id","Wrapper","shakeWrapper","pictures","NavBar","this","score","topScore","message","Component","footer","Jumbotron","App","state","cards","imagesClicked","shakeit","shuffledCard","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","map","picture","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6yDAWeA,G,MARK,SAAAC,GAAK,OACvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,+BAA+BC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,WCD/GC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAiC,SAArBD,EAAMU,aAAwB,eAAiB,WAAYV,EAAMW,YCgB5FC,G,uLAbX,OACE,yBAAKX,UAAU,mCACZ,4BAEC,wBAAIA,UAAU,UAAd,UAA+BY,KAAKb,MAAMc,MAA1C,iBAA+DD,KAAKb,MAAMe,SAA1E,KACA,6BACA,wBAAId,UAAU,WAAWY,KAAKb,MAAMgB,QAApC,W,GARWC,cCMNC,G,MAPA,kBACd,4BAAQjB,UAAU,UACf,yBAAKA,UAAU,aACX,0BAAMA,UAAU,QAAhB,oDCMOkB,G,MATG,kBACjB,4BAAQlB,UAAY,UACnB,mDACA,gG,OC4EamB,G,iNAvEbC,MAAQ,CACNC,QACAC,cAAe,GACfR,SAAU,EACVD,MAAO,EACPE,QAAS,GACTQ,QAAS,S,EAGXjB,YAAc,SAAAC,GAEX,IAAMiB,EAAe,EAAKC,aAAaJ,GACvC,EAAKK,SAAS,CAACL,MAAOG,IAElB,EAAKJ,MAAME,cAAcK,SAASpB,GACpC,EAAKmB,SAAS,CAAEb,MAAO,EAAGS,cAAe,GAAIP,QAAS,kFAAmFQ,QAAS,SAGlJ,EAAKG,SAAS,CACZJ,cAAe,EAAKF,MAAME,cAAcM,OAAO,CAACrB,IAChDM,MAAO,EAAKO,MAAMP,MAAQ,EAC1BE,QAAS,UACTQ,QAAS,UAIT,EAAKH,MAAMP,MAAS,EAAKO,MAAMN,UACjC,EAAKY,SAAS,CAAEZ,SAAU,EAAKM,MAAMP,S,EAIzCY,aAAe,SAACI,GACZ,IAAK,IAAIC,EAAID,EAAcE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC/C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADK,EAER,CAACD,EAAcG,GAAIH,EAAcC,IAAvED,EAAcC,GAFgC,KAE5BD,EAAcG,GAFc,KAInD,OAAOH,G,wEAIF,IAAD,OACP,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEa,MAAOD,KAAKQ,MAAMP,MAClBC,SAAUF,KAAKQ,MAAMN,SACrBC,QAASH,KAAKQ,MAAML,UAGtB,kBAAC,EAAD,CACEN,aAAgBG,KAAKQ,MAAMG,QAC3Bb,SACGE,KAAKQ,MAAMC,MAAMe,IAAI,SAAAC,GAAO,OAC3B,kBAAC,EAAD,CACE/B,YAAa,EAAKA,YAClBC,GAAI8B,EAAQ9B,GACZ+B,IAAKD,EAAQ9B,GACbL,KAAMmC,EAAQnC,KACdE,MAAOiC,EAAQjC,YAKvB,kBAAC,EAAD,W,GAnEUY,cCGEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e87c4ca0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst ImageHolder = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.cardClicked(props.id)}/>\n    </div>\n  </div>\n);\n\nexport default ImageHolder;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-default fixed-top\">\n         <ul>\n          \n          <li className=\"scores\">Score: {this.props.score} | Top Score: {this.props.topScore} </li>\n          <hr></hr>\n          <li className=\"message\">{this.props.message} </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst footer = () => (\r\n\t<footer className=\"footer\">\r\n    <div className=\"container\">\r\n        <span className=\"span\">&copy;Bikash - Marvel Clicky Game - React app.</span>\r\n    </div>\r\n</footer>\r\n);\r\nexport default footer;\r\n\r\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = () => (\n\t<header className = \"header\">\n\t\t<h1>Marvel Clicky Game!</h1>\n\t\t<h2>Click on any pictures below, but do not click more than once!</h2>\n\t\t\n\t</header>\n);\n\n\nexport default Jumbotron;","import React, { Component } from 'react';\r\nimport ImageHolder from \"./components/ImageHolder\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/footer\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport cards from \"./cards.json\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  // Setting this.state.cards to the cards json array\r\n  state = {\r\n    cards,\r\n    imagesClicked: [],\r\n    topScore: 0,\r\n    score: 0,\r\n    message: \"\",\r\n    shakeit: \"false\"\r\n  };\r\n\r\n  cardClicked = id => {\r\n    //Picture array shuffled.\r\n     const shuffledCard = this.shuffleArray(cards);\r\n     this.setState({cards: shuffledCard});\r\n     \r\n     if (this.state.imagesClicked.includes(id)) {\r\n       this.setState({ score: 0, imagesClicked: [], message: \"You clicked the same image twic, please click an image below to start the Game!\", shakeit: \"true\"});\r\n     }\r\n     else {\r\n       this.setState({\r\n         imagesClicked: this.state.imagesClicked.concat([id]),\r\n         score: this.state.score + 1,\r\n         message: \"Correct\",\r\n         shakeit: \"false\"\r\n       });\r\n     }\r\n     // holding the topscore.\r\n     if (this.state.score  > this.state.topScore) {\r\n       this.setState({ topScore: this.state.score });\r\n     }\r\n     \r\n   }\r\n   shuffleArray = (picturesArray) => {\r\n       for (let i = picturesArray.length - 1; i > 0; i--) {\r\n           const j = Math.floor(Math.random() * (i + 1));\r\n           [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\r\n       }\r\n       return picturesArray;\r\n\r\n    }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Jumbotron/>\r\n        \r\n        <NavBar \r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n          message={this.state.message}\r\n        />\r\n\r\n        <Wrapper\r\n          shakeWrapper = {this.state.shakeit}\r\n          pictures=\r\n            {this.state.cards.map(picture => (\r\n              <ImageHolder\r\n                cardClicked={this.cardClicked}\r\n                id={picture.id}\r\n                key={picture.id} \r\n                name={picture.name}\r\n                image={picture.image}\r\n              />\r\n            ))}\r\n        />  \r\n\r\n        <Footer/> \r\n          \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}